@page "/Demos"

@using JS.Abp.DataDictionary.Blazor.Server.Host.Demos;
@using JS.Abp.DataDictionary.DataDictionaries;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Microsoft.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@inherits DataDictionaryComponentBase
@inject IDemosAppService DemosAppService
@inject IUiMessageService UiMessageService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@inject IDataDictionariesAppService DataDictionariesAppService

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Demos"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <Form id="DemoSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="DemoSearchForm" Clicked="GetDemosAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="DemoDto"
                  Data="DemoList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="DemoDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="DemoDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="DemoDto"
                                          Visible="true"
                                          Clicked="async () => await OpenEditDemoModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="DemoDto"
                                          Visible="@CanDeleteDemo"
                                          Clicked="() => DeleteDemoAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="DemoDto"
                      Field="Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="DemoDto"
                      Field="DisplayName"
                      Caption="@L["DisplayName"]">
                           <DisplayTemplate> 
                        @{
                            if (DataDictionariesList.Count > 0)
                            {
                                var item = DataDictionariesList.Where(c => c.Code == context.DisplayName);
                                @(item.Any() ? item.First().DisplayText : context.DisplayName)

                            }
                            else
                            {
                                @(context.DisplayName)
                            }
                        }
                           </DisplayTemplate> 
              </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateDemoModal" Closing="@CreateDemoModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateDemoForm">
            <ModalHeader>
                <ModalTitle>@L["NewDemo"]</ModalTitle>
                <CloseButton Clicked="CloseCreateDemoModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewDemoValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewDemo"
                            ValidateOnLoad="false">
                     
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewDemo.Name" MaxLength="DemoConsts.NameMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["DisplayName"]</FieldLabel>
                            <Select TValue="string" @bind-SelectedValue="@NewDemo.DisplayName">
                                <SelectItem TValue="string" Value="null"></SelectItem>
                                @{
                                    foreach (var item in DataDictionariesList)
                                    {
                                        <SelectItem TValue="string" Value="@item.Code">@item.DisplayText</SelectItem>
                                    }
                                }
                            </Select>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateDemoModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateDemoForm" Clicked="CreateDemoAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditDemoModal" Closing="@EditDemoModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditDemoForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditDemoModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingDemoValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingDemo"
                            ValidateOnLoad="false">
                     
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingDemo.Name" MaxLength="DemoConsts.NameMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["DisplayName"]</FieldLabel>
                            <Select TValue="string" @bind-SelectedValue="@EditingDemo.DisplayName">
                                <SelectItem TValue="string" Value="null"></SelectItem>
                                @{
                                    foreach (var item in DataDictionariesList)
                                    {
                                        <SelectItem TValue="string" Value="@item.Code">@item.DisplayText</SelectItem>
                                    }
                                }
                            </Select>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditDemoModalAsync">
                    @L["Cancel"]
                </Button>
                @if (CanEditDemo)//add permission
                {
                    <SubmitButton Form="CreateDemoForm" Clicked="UpdateDemoAsync" />
                }
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
